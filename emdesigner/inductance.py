# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_inductance.ipynb.

# %% auto 0
__all__ = ['end_turn', 'airgap_inductance']

# %% ../nbs/07_inductance.ipynb 3
import numpy as np
from . import stator, rotor

# %% ../nbs/07_inductance.ipynb 8
def end_turn(motor_data):
    ns = motor_data.slots
    mu0 = 4*np.pi*1e-7
    theta_p = 2*np.pi/ns
    R_si = motor_data.outerdiameter
    tau_p = R_si*theta_p
    Nspp = ns/10/3
    alpha_cp = int(Nspp)/Nspp
    tau_c = alpha_cp*tau_p
    As = motor_data.stator.winding_area
    Le = ((ns**2)*mu0*tau_c/8)*np.log(np.pi*tau_c**2/(4*As))
    return 'yet to be included'

# %% ../nbs/07_inductance.ipynb 9
# write a function to calculate airgap inductance

def airgap_inductance(motor_data):
    ns = motor_data.stator.slots
    mu0 = 4*np.pi*1e-7
    theta_p = 2*np.pi/ns
    R_si = motor_data.stator.outerdiameter
    tau_p = R_si*theta_p
    Nspp = ns/(3*motor_data.rotor.poles)
    alpha_cp = int(Nspp)/Nspp
    tau_c = alpha_cp*tau_p
    As = 1
    L = motor_data.stator.stacklength
    lm = motor_data.magnetthickness_fraction
    g = motor_data.airgap
    Lg = (ns**2)*mu0*tau_c*L/(4*(lm + mu0*g))
    return 'yet to be included'
    
